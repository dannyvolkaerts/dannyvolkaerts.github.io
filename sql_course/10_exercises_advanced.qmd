---
title: "Oefeningen advanced"
author: Danny Volkaerts
date: last-modified
date-format: "DD MMM, YYYY" 
smaller: true
format:
  revealjs: 
    theme: default
filters:
  - interactive-sql
resources: 
  - sql_course_docs/sql-server-cheat-sheet-a4.pdf
databases:
  - name: tennis
    path: "https://raw.githubusercontent.com/dannyvolkaerts/something/main/tennis.sql"
  - name: ruimte
    path: "https://raw.githubusercontent.com/dannyvolkaerts/something/main/ruimtereizen.sqlite"
---


## De Tennisvereniging

![](sql_course_images/tennis_DB.png)

---

### Algemene informatie

Algemene info over dit database schema kan je [hier](Tennis_uitleg.html) vinden.

![Watterson, Calvin and Hobbes](sql_course_images/Calvin_and_Hobbes_playing_Calvinball.jpg){width=50%}

---

### Oefening 1

Maak een overzicht waarbij je per woonplaats aangeeft hoeveel spelers er wonen in die gemeente.Sorteer op plaats.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT plaats, COUNT(*) AS aantal\
FROM spelers\
GROUP BY plaats\
ORDER BY plaats;\
:::

---

### Oefening 2

Ga na hoeveel mannelijke en hoeveel vrouwelijke spelers de club telt. Zorg ervoor dat je lijst gesorteerd wordt van het grootst aantal spelers naar het kleinste aantal.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT geslacht, COUNT(*) AS aantal\
FROM spelers\
GROUP BY geslacht\
ORDER BY aantal DESC;\
:::

---

### Oefening 3

Geef een lijst met het totaalbedrag aan boetes per speler.
Sorteer het hoogste totale boetebedrag bovenaan.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT spelersnr, SUM(bedrag) AS totaalboetebedrag\
FROM boetes\
GROUP BY spelersnr\
ORDER BY totaalboetebedrag DESC;\
:::

---

### Oefening 4

Geef een lijst met voor elke speler met een boete, het totaal bedrag
aan boetes. Als het aantal boetes echter groter is dan 2, zet je 'veel
boetes'. Bij de andere spelers zet je een -.
Sorteer op aantal boetes aflopend en daarna op totaal boetebedrag
aflopend.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT spelersnr, SUM(bedrag) AS totaalboetebedrag,\
CASE\
WHEN COUNT(bedrag) > 2 THEN 'veel boetes'\
ELSE '-'\
END\
AS status\
FROM boetes\
GROUP BY spelersnr\
ORDER BY COUNT(bedrag) DESC, SUM(bedrag) DESC;\
:::

---

### Oefening 5

Geef per team, waarvoor wedstrijden gespeeld zijn, het gemiddeld
aantal gewonnen en verloren sets.
Rond de gemiddelden af tot op twee cijfers na de komma.
Sorteer op teamnr.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT teams.teamnr, teams.divisie,\
ROUND(AVG(gewonnen),2) AS gewonnen,\
ROUND(AVG(verloren),2) AS verloren\
FROM teams, wedstrijden\
WHERE teams.teamnr = wedstrijden.teamnr\
GROUP BY teams.teamnr, teams.divisie\
ORDER BY teams.teamnr;\
:::

---

### Oefening 6

Geef alle spelers die meer dan één wedstrijd gewonnen hebben.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT spelers.spelersnr, spelers.naam\
FROM wedstrijden, spelers\
WHERE wedstrijden.spelersnr = spelers.spelersnr\
AND wedstrijden.gewonnen > wedstrijden.verloren\
GROUP BY spelers.spelersnr, spelers.naam\
HAVING COUNT(*) > 1\
:::

---

### Oefening 7

Geef voor alle actieve bestuursleden die al een boete gehad
hebben van meer dan 50 euro hun maximale boetebedrag.
Gebruik geen DISTINCT.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT bestuursleden.spelersnr, MAX(boetes.bedrag)\
AS maximum\
FROM boetes, bestuursleden\
WHERE boetes.spelersnr = bestuursleden.spelersnr\
AND bestuursleden.eind_datum IS NULL\
GROUP BY bestuursleden.spelersnr\
HAVING MAX(boetes.bedrag) > 50;\
:::

---

### Oefening 8 - moeilijk

Sorteer de teams in functie van het aantal verloren wedstrijden
(oplopend). Als het aantal verloren wedstrijden gelijk is, sorteer je
op het totaal aantal gewonnen sets (aflopend) en op divisienaam
(oplopend).
Een wedstrijd die verloren werd met 3 - 0 telt niet mee in deze
output.
Geef het aantal wedstrijden dat voldoet aan bovenstaande
voorwaarde mee in de output.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT teams.divisie, COUNT(*) AS aantal\
FROM wedstrijden, teams\
WHERE wedstrijden.teamnr = teams.teamnr\
AND wedstrijden.verloren > wedstrijden.gewonnen\
AND NOT (wedstrijden.verloren = 3 AND\
wedstrijden.gewonnen = 0)\
GROUP BY teams.divisie\
ORDER BY aantal, SUM(wedstrijden.gewonnen) DESC,\
teams.divisie;\
:::

---

### Oefening 9

Geef de teams en het aantal verschillende spelers dat voor dit
team gespeeld heeft.
Sorteer op divisie.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT teams.divisie, COUNT(DISTINCT wedstrijden.spelersnr) AS aantal\
FROM wedstrijden, teams\
WHERE wedstrijden.teamnr = teams.teamnr\
GROUP BY teams.divisie\
ORDER BY teams.divisie;\
:::

---

### Oefening 10

Geef de teams (het nummer van het team en de divisie) waarvoor
meer dan vier verschillende spelers gespeeld hebben.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT teams.teamnr, teams.divisie\
FROM wedstrijden, teams\
WHERE wedstrijden.teamnr = teams.teamnr\
GROUP BY teams.teamnr, teams.divisie\
HAVING COUNT(DISTINCT wedstrijden.spelersnr) > 4;\
:::

---

### Oefening 11

Maak een lijst met per spelersnummer het aantal wedstrijden dat
een speler verloren heeft op voorwaarde dat deze speler meer dan
één wedstrijd verloren heeft. Bijkomend moet de lijst gesorteerd
worden op basis van het spelersnummer.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT spelersnr, COUNT(*) AS aantal\
FROM wedstrijden\
WHERE gewonnen < verloren\
GROUP BY spelersnr\
HAVING COUNT(*) > 1\
ORDER BY spelersnr;\
:::

---

### Oefening 12

Geef een lijst met de spelers die ooit bestuurslid zijn geweest (of
nog steeds zijn) en niet in Den Haag of Zoetermeer wonen.
Bijkomend mag deze speler maximaal 2 keer in het bestuur van de
club gezeteld hebben.
De lijst moet aflopend gesorteerd worden op het aantal maal dat de
betreffende speler in het bestuur zetelde. Mensen met hetzelfde
aantal keren moeten oplopend gesorteerd worden op basis van
hun spelersnr.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT spelers.naam, COUNT(*) AS aantal\
FROM spelers, bestuursleden\
WHERE bestuursleden.spelersnr = spelers.spelersnr\
AND plaats NOT IN ('Den Haag', 'Zoetermeer')\
GROUP BY spelers.spelersnr, spelers.naam\
HAVING COUNT(*) <= 2\
ORDER BY aantal DESC, spelers.spelersnr;\
:::

---

### Oefening 13

Geef het gemiddeld aantal gewonnen en verloren sets per
geboortejaar.
Sorteer op geboortejaar.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT strftime('%Y', geb_datum) AS geboortejaar, AVG(gewonnen) AS gewonnen, AVG(verloren) AS verloren
FROM wedstrijden INNER JOIN spelers ON (wedstrijden.spelersnr = spelers.spelersnr)
GROUP BY strftime('%Y', geb_datum)
ORDER BY geboortejaar
:::

---

### Oefening 14

Geef spelers die in het jaar dat ze lid geworden zijn van de club
reeds een boete van meer dan 50 euro gekregen hebben en de
som van al deze boetes groter of gelijk is aan 100 euro.
Geef buiten de voorletters en de naam van de speler ook het aantal
boetes die aan bovenstaande voorwaarden voldoen.
Sorteer op spelersnr.       

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT spelers.voorletters, spelers.naam, COUNT(*) AS aantalboetes \
FROM spelers, boetes \
WHERE spelers.spelersnr = boetes.spelersnr \
AND boetes.bedrag > 50 AND strftime('%Y',boetes.datum) = spelers.jaartoe \
GROUP BY spelers.spelersnr, spelers.voorletters, spelers.naam \
HAVING SUM(bedrag) >= 100 \
ORDER BY spelers.spelersnr;\
:::

---

### Oefening 15

Geef het gemiddeld boetebedrag per speler, afgerond op twee cijfers na de komma. Spelers zonder boete krijgen als waarde ‘geen boetes’. Sorteer op spelersnaam.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT spelers.naam,\
  CASE\
    WHEN AVG(boetes.bedrag) IS NULL THEN 'geen boetes'\
    ELSE CAST(ROUND(AVG(boetes.bedrag), 2) AS varchar(8))\
  END AS gemiddeld\
FROM spelers LEFT OUTER JOIN boetes ON spelers.spelersnr = boetes.spelersnr\
GROUP BY spelers.spelersnr, spelers.naam\
ORDER BY 1\
:::

---

### Oefening 16

Geef het gemiddeld aantal gewonnen en verloren sets per geboortejaar. Rond telkens af op twee cijfers na de komma. Sorteer op geboortejaar zodat de gegevens van de jongste spelers bovenaan staan.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT strftime('%Y', geb_datum) AS geboortejaar, ROUND(AVG(gewonnen),2) AS gewonnen,\
ROUND(AVG(verloren),2) AS verloren\
FROM wedstrijden W INNER JOIN spelers S ON W.spelersnr = S.spelersnr\
GROUP BY strftime('%Y',geb_datum)\
ORDER BY geboortejaar DESC;\
:::

---

### Oefening 17

Geef voor de actieve bestuursleden zonder boete hun laatste gespeelde wedstrijd (die met het hoogste wedstrijdnummer). Sorteer aflopend op spelersnr.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT bestuursleden.spelersnr, MAX(wedstrijden.wedstrijdnr) AS laatste_wedstrijd\
FROM bestuursleden\
INNER JOIN wedstrijden ON bestuursleden.spelersnr = wedstrijden.spelersnr AND\
bestuursleden.eind_datum IS NULL\
LEFT OUTER JOIN boetes ON bestuursleden.spelersnr = boetes.spelersnr\
WHERE boetes.spelersnr IS NULL\
GROUP BY bestuursleden.spelersnr\
ORDER BY bestuursleden.spelersnr DESC;\
:::

---

### Oefening 18

Geef het hoogste wedstrijdnummer voor de teams waarvoor
wedstrijden gespeeld zijn door bestuursleden (actief en niet meer
actief) die geen boete hebben gekregen.
Sorteer op teamnr.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT teams.teamnr, MAX(wedstrijden.wedstrijdnr) AS
laatstewedstrijd
FROM teams
INNER JOIN wedstrijden on teams.teamnr =
wedstrijden.teamnr
INNER JOIN bestuursleden ON wedstrijden.spelersnr =
bestuursleden.spelersnr
LEFT OUTER JOIN boetes ON bestuursleden.spelersnr =
boetes.spelersnr
WHERE boetes.spelersnr IS NULL
GROUP BY teams.teamnr
ORDER BY teams.teamnr;
:::

---

### Oefening 19

Geef alle spelers (nummer) die meer wedstrijden gespeeld hebben dan het
aantal wedstrijden dat de huidige voorzitter heeft verloren. De
huidige voorzitter komt zelf niet in de lijst voor. Gebruik geen
subqueries.
Sorteer op spelersnr.

``` {.sql .interactive .tennis}

```

:::{.notes}
SELECT spelers.spelersnr
FROM spelers
INNER JOIN wedstrijden ON spelers.spelersnr =
wedstrijden.spelersnr,
bestuursleden
INNER JOIN wedstrijden voorzitterswedstrijden ON
bestuursleden.spelersnr = voorzitterswedstrijden.spelersnr
AND voorzitterswedstrijden.gewonnen <
voorzitterswedstrijden.verloren
WHERE bestuursleden.eind_datum IS NULL AND
bestuursleden.functie = 'Voorzitter' AND
bestuursleden.spelersnr <> spelers.spelersnr
GROUP BY spelers.spelersnr
HAVING COUNT(DISTINCT wedstrijden.wedstrijdnr) >
COUNT(DISTINCT voorzitterswedstrijden.wedstrijdnr)
ORDER BY spelers.spelersnr;
:::

